package com.solrSearch.service;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import org.apache.log4j.Logger;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.solr.core.SolrTemplate;
import org.springframework.data.solr.core.query.Criteria;
import org.springframework.data.solr.core.query.Query;
import org.springframework.data.solr.core.query.SimpleQuery;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.solrSearch.util.SOLRSearch;

public class SOLRService implements SOLRSearch {
	
	private static final Logger logger = Logger.getLogger(SOLRService.class);
	@Autowired
	private SolrTemplate solrTemplate;
	
	
	public void getResults(String searchCriteria, List<String>displayFields){
		
		Criteria criteriaQuery = new Criteria("*:*");
		criteriaQuery = criteriaQuery.and(new Criteria(searchCriteria));
		
		Query queryStr = new SimpleQuery(criteriaQuery);
		QueryResponse response = null;
		try{
			@SuppressWarnings("deprecation")
			SolrServer solrServer = solrTemplate.getSolrServer();
			SolrQuery query = new SolrQuery();
			query.setQuery(queryStr.toString());
			query.setFacet(true);
			for(String field : displayFields){
				query.addFacetField(field);
			}
			query.set("wt","json");
			response = solrServer.query(query);
		} catch (SolrServerException e) {
			logger.error(e);
		} catch (IOException e) {
			logger.error(e);
		}
		
		if(response != null){
			List<SolrDocument> sd = response.getResults();
			List<JsonObject> results;
			for(SolrDocument solrDoc: sd){
				results.add(solrDoc);
			}
			return ;
		}
	}

	

}
