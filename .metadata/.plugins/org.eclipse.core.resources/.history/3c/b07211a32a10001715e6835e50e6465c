package com.solrSearch;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.solrSearch.controller.VoyagerSearchController;
import com.solrSearch.service.SOLRService;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

@RunWith(SpringRunner.class)
@EnableAutoConfiguration
@EnableConfigurationProperties
@WebAppConfiguration
@SpringBootTest
public class VoyagerSolrSearchApplicationTests {

	@Mock
    private SOLRService solrService;
	
	@InjectMocks
	private VoyagerSearchController voyagerSearchController;
	
	private MockMvc mockMvc;

	private String searchCriteria;
	
	private List<String> displayFields;
	
	@SuppressWarnings("unchecked")
	@Before
    public void setup() {
 
        // Process mock annotations
        MockitoAnnotations.initMocks(this);
 
        // Setup Spring test in standalone mode
        this.mockMvc = MockMvcBuilders.standaloneSetup(voyagerSearchController).build();
 
        searchCriteria = "";
        
        displayFields = mock(ArrayList.class);
    }
	@Test
	public void testGetResults() {
		
		when(solrService.getResults(searchCriteria, displayFields))
        .thenReturn("For Testing Controller success"));
	}

}
